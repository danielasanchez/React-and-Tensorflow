{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","machine","initial","states","on","next","loadingModel","modelReady","imageReady","showImage","identifying","complete","showResults","reducer","state","event","App","useState","classificationResults","setResults","imageURL","setImageURL","model","setModel","imageRef","useRef","inputRef","useReducer","appState","dispatch","reset","a","actionButton","action","mobilenet","text","current","click","classify","total","reduce","probabilityT","b","probability","className","src","logo","alt","style","width","ref","type","accept","capture","onChange","target","files","length","url","URL","createObjectURL","Button","variant","size","onClick","Table","striped","bordered","hover","map","i","index","key","toFixed","formatResult","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.1d0d1d16.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { useState, useRef, useReducer} from \"react\";\nimport * as mobilenet from \"@tensorflow-models/mobilenet\";\nimport \"./App.css\";\nimport logo from './logo.svg';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { Button, Table} from 'react-bootstrap';\n\nconst machine = {\n  initial: \"initial\",\n  states: {\n    initial: { on: { next: \"loadingModel\" } },\n    loadingModel: { on: { next: \"modelReady\" } },\n    modelReady: { on: { next: \"imageReady\" } },\n    imageReady: { on: { next: \"identifying\" }, showImage: true },\n    identifying: { on: { next: \"complete\" } },\n    complete: { on: { next: \"modelReady\" }, showImage: true, showResults: true }\n  }\n};\nconst reducer = (state, event) =>\n    machine.states[state].on[event] || machine.initial;\n\nfunction App() {\n  const [classificationResults, setResults] = useState([]);\n  const [imageURL, setImageURL] = useState(null);\n  const [model, setModel] = useState(null);\n  const imageRef = useRef();\n  const inputRef = useRef();\n  \n  const [appState, dispatch] = useReducer(reducer, machine.initial);\n  \n  const next = () => dispatch(\"next\");\n\n  const reset = async () => {\n    setResults([]);\n    next();\n  };\n\n  const upload = () => inputRef.current.click();\n\n  const loadModel = async () => {\n    next();\n    const model = await mobilenet.load();\n    setModel(model);\n    next();\n  };\n  const handleUpload = event => {\n    const { files } = event.target;\n    if (files.length > 0) {\n      const url = URL.createObjectURL(event.target.files[0]);\n      setImageURL(url);\n      next();\n    }\n  };\n\n  const identify = async () => {\n    next();\n    const classificationResults = await model.classify(imageRef.current);\n    setResults(classificationResults);\n    next();\n  };\n\n  const actionButton = {\n    initial: { action: loadModel, text: \"Load Model\" },\n    loadingModel: { text: \"Loading Model...\" },\n    modelReady: { action: upload, text: \"Upload Image\" },\n    imageReady: { action: identify, text: \"Identify Breed\" },\n    identifying: { text: \"Identifying...\" },\n    complete: { action: reset, text: \"Reset\" }\n  };\n\n  const { showImage=false, showResults=false } = machine.states[appState];\n  \n  const formatResult=(b,index)=>(\n    <tr key={index}>\n      <td>{b.className}</td>\n      <td>{`${(b.probability * 100).toFixed(2)}%`}</td>\n    </tr>\n  ); \n  \n\n  const total = classificationResults.reduce((probabilityT,b)=>{returnÂ probabilityT+b.probability},0)\n\n \n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>Dog breed classifier</p>\n      </header>\n      <div className=\"div\">\n\n        <div style={{ width: '18rem' }}>\n          { \n            showImage \n            && \n            <img className=\"img\" \n               src={imageURL} \n               alt=\"upload-preview\" \n               ref={imageRef} />\n          }\n          <input\n            type=\"file\"\n            accept=\"image/*\"\n            capture=\"camera\"\n            ref={inputRef}\n            onChange={handleUpload}\n          />\n\n          <Button variant=\"secondary\" size=\"lg\"  onClick={actionButton[appState].action}>\n            {actionButton[appState].text}\n          </Button>\n        </div>\n        <div style={{ width: '18rem' }}>\n          {\n            showResults && \n              <Table striped bordered hover>\n              <thead>\n                <tr>\n                  <th>Breed</th>\n                  <th>%</th>\n                </tr>\n              </thead>\n              <tbody>\n                {\n                  classificationResults.map((b,i)=>formatResult(b,i))\n                }\n              </tbody>\n            </Table>\n          }\n          {\n            (showResults && total < 0.5) && <h3>Your dog is unique</h3>\n          }\n        </div>\n        \n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}